name: build

on:
  workflow_dispatch:
    inputs:
      versionBump:
        description: 'The part of the version to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'INTHEWILD.md'
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/**'
      - checkov/version.py
      - kubernetes/requirements.txt
      - coverage.svg
      - '.swm/**'
      - '.pre-commit-config.yaml'

concurrency:
  group: 'build'
  cancel-in-progress: true

jobs:
  integration-tests:
    strategy:
      fail-fast: true
      matrix:
        python: ["3.7", "3.8"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f  # v3
      - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435  # v4
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c  # v3
      - uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78  # v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: imranismail/setup-kustomize@a76db1c6419124d51470b1e388c4b29476f495f1  # v2
        if: ${{ runner.os != 'windows' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Build & install checkov package
        run: |
          pipenv --python ${{ matrix.python }}
          pipenv run pip install pytest pytest-xdist
          pipenv run python setup.py sdist bdist_wheel
          bash -c 'pipenv run pip install dist/checkov3-*.whl'
      - name: Clone Terragoat - vulnerable terraform
        run: git clone https://github.com/bridgecrewio/terragoat
      - name: Clone Cfngoat - vulnerable cloudformation
        run: git clone https://github.com/bridgecrewio/cfngoat
      - name: Clone Kubernetes-goat - vulnerable kubernetes
        run: git clone https://github.com/madhuakula/kubernetes-goat
      - name: Clone kustomize-goat - vulnerable kustomize
        run: git clone https://github.com/bridgecrewio/kustomizegoat
      - name: Create checkov reports
        run: |
          # Just making sure the API key tests don't run on PRs
          bash -c './integration_tests/prepare_data.sh "${{ matrix.os }}" "${{ matrix.python }}"'
        env:
          LOG_LEVEL: INFO
          BC_KEY: ${{ secrets.BC_API_KEY }}
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      - name: Run integration tests
        run: |
          pipenv run pytest integration_tests
  unit-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f  # v3
      - name: Set up Python 3.7
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435  # v4
        with:
          python-version: 3.7
      - uses: azure/setup-helm@f382f75448129b3be48f8121b9857be18d815a82  # v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: imranismail/setup-kustomize@a76db1c6419124d51470b1e388c4b29476f495f1  # v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          pipenv --python 3.7
          pipenv install --dev
      - name: Test with pytest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pipenv run python -m pytest tests
  bump-version:
    needs: [integration-tests, unit-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f  # v3
        with:
          token: ${{ secrets.GH_PAT_SECRET }}
      - name: Set up Python 3.7
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435  # v4
        with:
          python-version: 3.7
      - name: Install pipenv
        run: |
          python -m pip install --no-cache-dir --upgrade pipenv
      - name: Install dependencies
        run: |
          pipenv --python 3.7
          pipenv install
      - name: Calculate version
        run: |
          git fetch --tags --force
          latest_tag="$(git describe --tags "$(git rev-list --tags --max-count=1)")"
          echo "latest tag: $latest_tag"
          if [[ -z "${{ inputs.versionBump }}" ]]
          then
            version="patch"
          else
            version="${{ inputs.versionBump }}"
          fi
          case $version in
            minor)
              new_tag=$(echo "$latest_tag" | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a, $2+b+1 , 0)}')
              ;;
            major)
              new_tag=$(echo "$latest_tag" | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a+1, 0 , 0)}')
              ;;
            patch)
              new_tag=$(echo "$latest_tag" | awk -F. -v a="$1" -v b="$2" -v c="$3" '{printf("%d.%d.%d", $1+a, $2+b , $3+1)}')
              ;;
          esac

          echo "new tag: $new_tag"
          echo "version=$new_tag" >> "$GITHUB_OUTPUT"
          
          # grab major version for later image tag usage         
          major_version=$(echo "${new_tag}" | head -c1)
          echo "major_version=$major_version" >> "$GITHUB_OUTPUT"
        id: calculateVersion
      - name: version
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          ## update docs
          export PYTHONPATH='.'
          # change the doc links to proper markdown versions
          export CHECKOV_CREATE_MARKDOWN_HYPERLINKS='True'
          git pull

          for i in cloudformation terraform kubernetes serverless arm dockerfile secrets github_configuration gitlab_configuration bitbucket_configuration github_actions gitlab_ci bicep openapi bitbucket_pipelines argo_workflows circleci_pipelines azure_pipelines ansible all
          do
            export scansdoc="docs/5.Policy Index/$i.md"
            echo "---" > "$scansdoc"
            echo "layout: default" >> "$scansdoc"
            echo "title: $i resource scans" >> "$scansdoc"
            echo "nav_order: 1" >> "$scansdoc"
            echo "---" >> "$scansdoc"
            echo "" >> "$scansdoc"
            echo "# $i resource scans (auto generated)" >> "$scansdoc"
            echo "" >> "$scansdoc"
            pipenv run python checkov/main.py --list --framework "$i" >> "$scansdoc"
          done

          #add cloudformation scans to serverless
          export scansdoc="docs/5.Policy Index/serverless.md"
          pipenv run python checkov/main.py --list --framework cloudformation >> "$scansdoc"
          git add "docs/5.Policy Index/*"
          git commit --reuse-message="HEAD@{1}" || echo "No changes to commit"
          
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          new_tag=${{ steps.calculateVersion.outputs.version }}
          echo "new tag: $new_tag"
          ## update python version
          echo "version = '$new_tag'" > 'checkov/version.py'
          echo "checkov==$new_tag" > 'kubernetes/requirements.txt'

          git commit --reuse-message="HEAD@{1}" checkov/version.py kubernetes/requirements.txt || echo "No changes to commit"
          git push origin
          git tag $new_tag
          git push --tags
        id: version
      - name: create python package
        run: |
          pipenv run python setup.py sdist bdist_wheel
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@a3a3bafbb3e5a75a854ae1bc53ae128cf22c4af4  # v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
      - name: sleep and wait for package to refresh
        run: |
          sleep 2m
    outputs:
      version: ${{ steps.calculateVersion.outputs.version }}
      major_version: ${{ steps.calculateVersion.outputs.major_version }}
